using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SkiServiceAPI.Controllers;
using SkiServiceAPI.Models;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using System.Threading.Tasks;
using SkiServiceAPI;
using Xunit;

public class AuthControllerTests
{
    private readonly AuthController _controller;
    private readonly SkiServiceDbContext _dbContext;

    public AuthControllerTests()
    {
        // Set up an in-memory database
        var options = new DbContextOptionsBuilder<SkiServiceDbContext>()
            .UseInMemoryDatabase(databaseName: "TestDb")
            .Options;

        _dbContext = new SkiServiceDbContext(options);

        var config = new ConfigurationBuilder().AddInMemoryCollection().Build();
        var logger = new LoggerFactory().CreateLogger<AuthController>();

        _controller = new AuthController(config, _dbContext, logger);
    }

    [Fact]
    public async Task Register_UserAlreadyExists_ReturnsConflict()
    {
        // Arrange
        var existingUser = new User { Username = "testuser", Password = "password123" };
        _dbContext.Users.Add(existingUser);
        await _dbContext.SaveChangesAsync();

        var newUser = new User { Username = "testuser", Password = "newpassword" };

        // Act
        var result = await _controller.Register(newUser);

        // Assert
        var conflictResult = Assert.IsType<ConflictObjectResult>(result);

        // Print actual response for debugging
        Console.WriteLine($"Actual Response: {conflictResult.Value}");

        // Extract and validate the error message
        if (conflictResult.Value is string responseMessage)
        {
            Assert.Equal("Username already exists.", responseMessage);
        }
        else if (conflictResult.Value is not null)
        {
            var responseObject = conflictResult.Value.ToString();
            Assert.Contains("Username already exists.", responseObject);
        }
        else
        {
            Assert.False(true, "Conflict response is null");
        }
    }



    [Fact]
    public async Task Register_NewUser_ReturnsOk()
    {
        // Arrange
        var newUser = new User { Username = "newuser", Password = "password123" };

        // Act
        var result = await _controller.Register(newUser);

        // Assert
        Assert.IsType<OkObjectResult>(result);
    }
}
